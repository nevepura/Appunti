git
lez6
21/11/2018

RIPASSO
	branch
	checkout
	merge
		merge strategies
		git merge --continue : equivale a git commit; si usa quando hai risolto un conflitto, dopo aver fatto "git add"

		git merge -s recursive -Xours : la strategia qui e` recursive;
		git merge -s ours : la strategia e` ours;
		sono due usi diversi di ours: nel primo caso e` un opzione, nel secondo e` una strategia.
	
PRATICA
	ssh-keygen
	cat .ssh/id_rsa.pub
	carica su git
	
	git push--tag : pusha tutti i tag
	
TEORIA
	
	TAG
		Si tratta di un nome semantico e un puntatore a una commit
		il nome (identificativo semantico) serve per aiutare gli umani, sostituendo l'hash come identificativo
		HEAD e` un tag predefinito
		
		Ci sono 2 tipi di tag in git:
		1) lightweight : nome, puntatore
		2) annotated: nome, ptr, autore, mail, timestamp
		
		Il tag (come i branch) normalmente si crea in locale. Se serve in remoto, va pushato. 
		
		Best practices associate:
		Non pubblicare tag lightweight
		Ogni azienda ha le proprie convenzioni sui tag
		
		Uso tipico dei tag
			Distinguere le release

	REBASE (pt2)
	ho due branch, un master e un test
	facendo rebase, sposto ricorsivamente il collegam tra i 2 branch, nodo per nodo, in avanti verso il ramo master; 
	alla fine si ha un collegamento che permette push fast forward
	
	a basso livello, si fanno dei commit di copia. Quindi, alcuni commit cambiano hash, sebbene mantengano i contenuti.
	
	Best practice:
		fare rebase solo in locale, allo scopo di filtrare e pulire i propri commit prima di una push. Pulizia e chiarezza, insomma.
	
	REFLOG
	

COMANDI su tag e rebase
	
	TAG
		Light
			git tag <nome> : crea tag Lightweight
		Rebase
			git tag -a <nome> -m "messaggio"
		
			git tag <nome> [hash] : per taggare un commit precedente 
		
			git push <nome_remote> <nome_tag>
				per pushare tag in remote. Il remote di solito e` origin
			
			git show <nome-tag>
		
	REBASE
		Quali sono le diff con il merge?
		Il rebase lascia una storia piu` pulita, ma e` piu` difficile da usare.
		Il merge e` piu` sicuro

		git rebase -i : rebase interattivo, aprendo un text editor e mostrando una tabella opzione-hash-messaggio
		opzioni:
			pick, edit, squash, fixup, drop
		
		
		
