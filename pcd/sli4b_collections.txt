data di inizio: 2019-03-02
data di fine: 2019-04-02 (h 00:02)
slide 4b

Errori
	slide 10: aggiungere tipo di ritorno 'String' al metodo toString()
	slide 10: cambiare 'map' con 'm' in "map.put(...)" 
	possibili errori sulle stampe degli esercizi azzurri. Sembra le coppie vengano ordinate, da 0 a n-1.
Eccezioni 


Argomenti trattati
	
	Arrays
	
	Comparable
	Collections

	for-each
	
	List
		ArrayList
		LinkedList
	Map
		HashMap
		TreeMap
	Random
	Set
		HashSet
		TreeSet
	


Collection, Collezione
	è un contenitore di elementi, che di solito sono di tipo diverso
	lunghezza dinamica

in Collection trovi sempre
	interfacce
	implementazioni (classi)
	algoritmi (metodi)

Nella gerarchia sono importanti
	List 
	Set
	Map
	Utilities: Collections e Arrays

List (interface)

ArrayList (class)
	usi
		ok per accesso e inserimento (credo in coda)(costo ammortizzato)
		male per rimozione
	
	metodi

		isEmpty
		get
		set
		iterator //
		listIterator //
		add
		contains
		indexOf
		remove
			E remove (int index)
				rimuove l'elemento in posizione 'index' e lo ritorna
			boolean remove (Object o)
				rimuove la prima occorrenza di 'o', se presente; ritorna true se la rimozione ha successo
			slide 9:
				obj.remove(new Object("PrimoOggetto"));
				ritorna false, perché equals() non è ridefinito
	altro
		non è thread-safe
		inv: length <= capacity
	costruttori
		ArrayList()
		ArrayList(Collection<? extends E>)
			l'ordine degli elementi è determinato dall'iteratore della collection
		ArrayList(int initCapacity)


LinkedList (class)
	info
		implementa List
		lista doppiamente linkata
		non è thread-safe

	usi
		ok per inserimento e cancellazione
		male per accesso casuale

	metodi
		offer
			boolean offer(E e)
			tenta di aggiungere l'elemento in coda
			se fallisce ritorna false
		peek
			E peek()
			ritorna la testa della lista senza rimuoverla
		pop
			E pop()
			ritorna la testa della lista rimuovendola
		push
			void push(E e)
			inserisce in fronte
	costruttori
		LinkedLIst()
		LinkedLIst(Collection<? extends E> c)
			ordine di costruzione det dall'iteratore


for-each
	for (tipo nome_variabile : nome_collezione) {
		.. fai operazioni sulla collezione
	}

	ciclo for che evita di usare direttamente indice o iteratore
	si usa per array o per oggetti (collezioni) che implementano l'interfaccia Iterable
	scorre tutta la collezione 

	es
	List<String> someList = new ArrayList<String>();
	someList.add("alfa");
	someList.add("beta");
	someList.add("delta");

	for (String item: someList) {
		System.out.println(item); // alfa beta delta
	}

Map (interface)
	array associativo di coppie chiave-valore
	le chiavi sono uniche, cioè tutte diverse
Map.Entry<K,V>
	è una entry, cioè una coppia chiave-valore della Map

HashMap (class)
	info
		insieme non ordinato di chiavi-valore
		ha le performance delle funzioni di hash

	come trovare la posizione di un elemento dentro la hashmap
		calc il suo hash
		hash % (tableLength -1)
	campi
		initialCapacity
		capacity
		loadFactor
		threshold
			= loadFactor * capacity
			if (threshold exceeded) resize a una maggiore capacity
	metodi
		clear
			svuota la mappa (= rimuove tutte le mappature)
		clone
			shallow copy
		containsKey
		containsValue
		entrySet
			Set<Map.Entry<K,V>> entrySet()
			ritorna un Set contenente tutte le coppie K-V della Map
		keySet
			Set<K> keySet()
			ritorna il Set di chiavi della mappa
		get
			V get (Object key)
			ritorna il valore mappato da key se presente, null se assente
		put
		remove
		size
		hashCode
			oggetti distinti hanno hashCode distinto
	errori comuni
		si sconsiglia di mutare elementi contenuti in HashMap. Cambiare un elemento ne modifica l'hashCode. La posizione dell'elemento è determinata dall'hashCode: cambiandolo, la posizione attuale diverrebbe inconsistente con quella calcolabile dal nuovo hashCode.
	
TreeMap (class)
	info
		insieme ordinato di chiavi-valore
		implementato con albero Rosso-Nero (O(logn))
		performance di albero R-N

Set (interface)
	insieme matematico
	non ammette duplicati
	implementazioni: HashSet, TreeSet

HashSet
	info
		elementi disordinati
		tempo costante per accesso, aggiunta, rimozione
		NON thread-safe
	metodi
		add
		clear
		clone (shallow copy)
		contains
		isEmpty
		remove
		size

TreeSet
	info
		elementi disordinati
		tempo logaritmico
		NON thread-safe
	costruttori
		TreeSet()
			crea treeset vuoto
		TreeSet(Collection<? extends E> coll)
			crea un treeset con gli elementi passati dalla collezione
		TreeSet(Comparator<? super E> comp)
			crea un ins vuoto il cui ordine è imposto dal comparatore
		TreeSet(SortedSet<E> s)
			elementi e ordine dati dal sorted set 
	metodi
		add
		remove
		ceiling
		higher
		first
			ritorna l'elemento più piccolo
		last
			più grande
		subSet()
			NavigableSet<E> subSet(E fromElement, booleanfromInclusive,
									E toElement, boolean toInclusive)
			ritorna una porzione dell'insieme 

Random
	metodi
		nextInt
			int nextInt(int n)
				 genera un valore 'x' pseudocasuale 0 <= x < n
				 tutti gli n valori hanno stessa possibilità di essere generati

Comparable
	metodo
		int compareTo(T o)
		'o' è l'oggetto da comparare
		ritorna -1,0,1, rispettivamente,
		se l'oggetto su cui si applica compareTo è inferiore, uguale o superiore dell'oggetto specificato
	eccezioni
		NullPointerException
			se 'o' è null
		ClassCastException
			se il tipo di 'o' non può essere confrontatoimpedisce il confronto


Collections (class)
	segnatura
		pubic class Collections extends Object
	info
		insieme di metodi statici e generici che operano su collezioni
	metodi
		addAll
		binarySearch
		fill
			riempie la collezione con l'elemento dato 'obj'
		sort
		copy
			shallow copy degli elementi a una lista dest da una lista src 

Arrays (class)
	segnatura
		public class Arrays extends Object
	info
		metodi per operazioni su array e liste e conversioni tra array e liste di uguale dimensione
	metodi
		asList
			crea una lista a partire da un'array
			es
				List<String> positions = Arrays.asList{"fisrt", "second", "third"};
		binarySearch
		copyOf
			copia l'array passato per arg. tronca o filla con padding. shallow copy
		
		deepToString
		deepEquals
		sort
	